plugins {
    id 'idea'
    id 'java'
    id 'org.springframework.boot' version'2.1.6.RELEASE'
    id 'io.spring.dependency-management' version'1.0.8.RELEASE'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.ytt.shopping'
    version = '1.0.0-SNAPSHOT'
    //jvm(java虚拟机版本号)第一个是你项目使用的jdk版本 第二个是你项目运行的jdk版本
    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/libs-release" }
        mavenCentral()
        jcenter()
    }

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //指定编码格式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    configurations {
        // remove default logger
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

subprojects {
    dependencies {
        testCompile(
                'org.springframework.boot:spring-boot-starter-test',
                "junit:junit:4.12"
        )
        compileOnly(
                'org.projectlombok:lombok'
        )
//        runtimeOnly(
//                'org.springframework.boot:spring-boot-devtools'
//        )
        annotationProcessor(
                'org.springframework.boot:spring-boot-configuration-processor',
                'org.projectlombok:lombok'
        )
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}

//定义子项目core的配置
project(':core') {
    dependencies {
        compile(
                'org.springframework.boot:spring-boot-starter-cache',
                'org.springframework.boot:spring-boot-starter-validation',
                'org.springframework.boot:spring-boot-starter-aop',
                'org.springframework.boot:spring-boot-devtools',
                'org.springframework.boot:spring-boot-starter-log4j2',
                'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml',
                'com.fasterxml.jackson.dataformat:jackson-dataformat-xml',

                'com.google.code.gson:gson',
                'org.apache.commons:commons-lang3',

                'javax.validation:validation-api',
                'org.joda:joda-money:1.0.1',
                'org.joda:joda-convert:2.2.1',
                'org.jadira.usertype:usertype.core:7.0.0.CR1',
                'javax.annotation:javax.annotation-api:1.3.2'
        )

    }
}

//定义子项目model的配置
project(':model') {
    dependencies {
        compile(
                project(":core"),
                'javax.persistence:javax.persistence-api'
        )
    }
}

//定义子项目jpa的配置
project(':jpa') {
    dependencies {
        compile(
                project(":model"),
                'org.springframework.boot:spring-boot-starter-data-jpa',
                'org.springframework.boot:spring-boot-starter-jdbc',
                'mysql:mysql-connector-java',
                'com.zaxxer:HikariCP',
        )
    }
}

//定义子项目mybatis的配置
project(':mybatis') {
    dependencies {
        compile(
                project(":model"),
                'mysql:mysql-connector-java',
                'org.springframework.boot:spring-boot-starter-jdbc',
                'com.zaxxer:HikariCP',
                'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1',
        )
    }
}

//定义子项目redis的配置
project(':redis') {
    dependencies {
        compile(
                project(':model'),
//                'redis.clients:jedis:3.1.0-m1',
                'org.springframework.boot:spring-boot-starter-data-redis',
        )
    }
}

//定义子项目service的配置
project(':service') {
    dependencies {
        compile (
                //                project(":jpa"),
                project(':mybatis'),
                project(':redis'),
        )
    }
}

//定义子项目api的配置
project(':api') {
    dependencies {
        compile(
                project(':model'),
        )
    }
}

//定义子项目server的配置
project(':server') {
    dependencies {
        compile (
                project(":api"),
                project(":service"),
        )
    }
}

project(':rest') {
    dependencies {
        compile (
                project(":service"),
                'org.springframework.boot:spring-boot-starter-webflux',

        )
    }
}

project(':web') {
    apply plugin: "war"
    dependencies {
        compile(
                project(":service"),
                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.boot:spring-boot-starter-thymeleaf',

//                'de.codecentric:spring-boot-admin-starter-client:2.1.6',
//                'org.springframework.boot:spring-boot-starter-actuator',
//
//                'org.springframework.boot:spring-boot-starter-security',
//                'org.springframework.boot:spring-boot-starter-test',
//                'org.springframework.security:spring-security-test',
        )

        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }
}

project(':actuator-spring-boot-admin'){
    dependencies {
        compile(
                'de.codecentric:spring-boot-admin-starter-server:2.1.6',

                'org.springframework.boot:spring-boot-starter-web',

                'org.springframework.boot:spring-boot-starter-security',
                'org.springframework.boot:spring-boot-starter-test',
                'org.springframework.security:spring-security-test',

                'javax.annotation:javax.annotation-api:1.3.2'
        )
    }
}

project(':https-ssl') {
    dependencies {
        compile(
                project(":service"),
                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.boot:spring-boot-starter-thymeleaf',
        )
    }
}

project(':eureka-server') {
    dependencies {
        compile(
                'org.springframework.boot:spring-boot-starter-log4j2',
                'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml',

                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:2.1.2.RELEASE',

                // JAX-B dependencies
                "javax.xml.bind:jaxb-api:2.3.1",
                "com.sun.xml.bind:jaxb-core:2.3.0.1",
                "com.sun.xml.bind:jaxb-impl:2.3.2",
                "javax.activation:activation:1.1.1",

        )
        // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies
        compile group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: 'Greenwich.RELEASE', ext: 'pom'
    }
}

project(':eureka-web-service') {
    dependencies {
        compile(
                project(":service"),

                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.1.2.RELEASE',
                'org.springframework.boot:spring-boot-starter-actuator',
                'io.micrometer:micrometer-registry-prometheus',

                // JAX-B dependencies
                "javax.xml.bind:jaxb-api:2.3.1",
                "com.sun.xml.bind:jaxb-core:2.3.0.1",
                "com.sun.xml.bind:jaxb-impl:2.3.2",
                "javax.activation:activation:1.1.1",
        )


        // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies
        compile group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: 'Greenwich.RELEASE', ext: 'pom'
    }
}

//定义子项目service的配置
project(':spring-code') {
    dependencies {
        compile(
                project(":core")
        )
    }
}
